{"ast":null,"code":"var _jsxFileName = \"/Users/kirilltsvetkov/elbrus/urChat/client/src/components/ChannelSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { ResultsDropdown } from './';\nimport { SearchIcon } from '../assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelSearch = _ref => {\n  _s();\n\n  let {\n    setToggleContainer\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = event => {\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-search__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-search__input__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-serach__input__icon\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channel-search__input__text\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannels: teamChannels,\n      directChannels: directChannels,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChannelSearch, \"BmvJQUMKP1VdRC1U80mpHY6vzPA=\", false, function () {\n  return [useChatContext];\n});\n\n_c = ChannelSearch;\nexport default ChannelSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"sources":["/Users/kirilltsvetkov/elbrus/urChat/client/src/components/ChannelSearch.js"],"names":["React","useState","useEffect","useChatContext","ResultsDropdown","SearchIcon","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","event","preventDefault","target","value","setChannel","channel"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\n\nimport { ResultsDropdown } from './'\nimport { SearchIcon } from '../assets';\n\nconst ChannelSearch = ({ setToggleContainer }) => {\n  const { client, setActiveChannel } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([])\n  const [directChannels, setDirectChannels] = useState([])\n\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query])\n\n  const getChannels = async (text) => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: { $autocomplete: text },\n        members: { $in: [client.userID] }\n      });\n      const userResponse = client.queryUsers({\n        id: { $ne: client.userID },\n        name: { $autocomplete: text }\n      })\n\n      const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\n\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('')\n    }\n  }\n\n  const onSearch = (event) => {\n    event.preventDefault();\n\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value)\n  }\n\n  const setChannel = (channel) => {\n    setQuery('');\n    setActiveChannel(channel);\n  }\n\n  return (\n    <div className=\"channel-search__container\">\n      <div className=\"channel-search__input__wrapper\">\n        <div className=\"channel-serach__input__icon\">\n          <SearchIcon />\n        </div>\n        <input\n          className=\"channel-search__input__text\"\n          placeholder=\"Search\"\n          type=\"text\"\n          value={query}\n          onChange={onSearch}\n        />\n      </div>\n      {query && (\n        <ResultsDropdown\n          teamChannels={teamChannels}\n          directChannels={directChannels}\n          loading={loading}\n          setChannel={setChannel}\n          setQuery={setQuery}\n          setToggleContainer={setToggleContainer}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default ChannelSearch\n"]},"metadata":{},"sourceType":"module"}